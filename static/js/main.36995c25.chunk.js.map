{"version":3,"sources":["components/Box.js","components/Grid.js","Main.js","index.js"],"names":["Box","clickbox","props","row","col","this","boxClass","id","className","onClick","Component","Grid","filling","cellgrid","i","j","boxId","push","style","width","Main","seedbtn","arr","clickcopy","state","JSON","parse","stringify","noofrows","noofcoloums","Math","floor","random","setState","value","play","g","count","playbtn","clearInterval","intervalId","setInterval","pausebtn","clearbtn","pause","Array","fill","map","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36995c25.chunk.js","sourcesContent":["import React,{Component} from \"react\";\r\nimport Grid from \"./Grid\";\r\nimport '../box.css';\r\n\r\n\r\nclass Box extends Component {\r\n\r\n    clickbox=()=>{\r\n        // const {clickcell,row,col}=this.props;\r\n    // selectbox function that created in main.js\r\n       this.props.clickbox(this.props.row,this.props.col)\r\n    }\r\n    render() {\r\n        const {boxClass,id}=this.props;\r\n        // console.log('id',id)\r\n        return (\r\n         <div \r\n         className={boxClass}\r\n         id={id}\r\n         onClick={this.clickbox}\r\n         ></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Box;","import { Component } from \"react\";\r\nimport React from \"react\";\r\nimport './grid.css';\r\n\r\n\r\nimport Box from \"./Box\";\r\n\r\n\r\nclass Grid extends Component {\r\n\r\n\t\r\n  render(props){\r\n\r\nconst {filling }=this.props;\r\n    const width = (50*16);\r\n    var cellgrid=[]\r\n// genral mapping for the griding\r\n    var boxClass= \"\";\r\n\t\tfor (var i = 0; i < 30; i++) {\r\n\t\t\t// same as mapping statement\r\n\t\t\tfor (var j = 0; j < 50; j++) {\r\n\t\t\t\t// for assigning a cell id \r\n\t\t\t\tlet boxId = i + \"N\" + j;\r\n\r\n\t\t\tboxClass= filling[i][j] ? \"box on\" : \"box off\";\r\n\t\t\t\t//pushing the component box which can create idividual cell of grid \r\n\t\t\tcellgrid.push(\r\n\t\t\t\t\t<Box\r\n\t\t\t\t\t\tboxClass={boxClass}\r\n\t\t\t\t\t\tkey={boxId}\r\n\t\t\t\t\t\tboxId={boxId}\r\n\t\t\t\t\t\trow={i}\r\n\t\t\t\t\t\tcol={j}\r\n\t\t\t\t\t\tclickbox={this.props.clickbox}  \r\n\t\t\t\t\t></Box>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n// console.log(cellgrid)\r\n// console.log(noofcoloums)\r\n// console.log(noofrows);\r\n\t\treturn (\r\n\t\t\t<div className=\"grid\" style={{ \r\n\t\t\twidth: width}}>\r\n\t\t\t{cellgrid}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport default Grid;","import React, { Component } from 'react';\n\n\nimport Grid from './components/Grid';\nimport Box from './components/Box';\n\nclass Main extends Component{\n  constructor(props) {\n    super(props);\n    this.noofrows=30;\n    this.noofcoloums=50;\n\n    this.state = { \n      value: 0,\n      \n      // for griding a array using filling object which can show a cells\n      filling: Array(this.noofrows).fill().map(()=> Array(this.noofcoloums).fill(false))\n\n     };\n  }\n  seedbtn =()=>{\n// clonnig a array using Json strigify\n    function arrayClone(arr) {\n      return JSON.parse(JSON.stringify(arr));\n    }\n  let  clickcopy= arrayClone(this.state.filling)\n  for (let i = 0; i < this.noofrows; i++) {\n    for (let j = 0; j < this.noofcoloums; j++) {\n//  random cell intialization using math function\n      if (Math.floor(Math.random() * 4) === 1) {\n       clickcopy[i][j] = true;\n      }\n    \n      //intialising a values of clickcopy into state\n      this.setState({filling:clickcopy,\n      value:this.state.value+1})\n     \n    }\n  }\n  }\n \nclickbox =(row ,col)=>{\n  function arrayClone(arr) {\n    return JSON.parse(JSON.stringify(arr));\n  }\n  \n  let clickcopy= arrayClone(this.state.filling)\n  clickcopy[row][col] = !clickcopy[row][col]\n  // changing a values using of object filling using setstate\n  this.setState({filling: clickcopy});\n}\nplay=()=>{\n// creating a play button for intialinsing all rules of assignment\n// Any live cell with fewer than two live neighbors dies, as if by loneliness.\n// 2. Any live cell with more than three live neighbors dies, as if by overcrowding.\n// 3. Any live cell with two or three live neighbors lives, unchanged, to the next generation.\n// 4. Any dead cell with exactly three live neighbors comes to life.\n\n  function arrayClone(arr) {\n    return JSON.parse(JSON.stringify(arr));\n  }\n  let g = this.state.filling;\n  let clickcopy= arrayClone(this.state.filling);\n  for (let i = 0; i < this.noofrows; i++) {\n    for (let j = 0; j < this.noofcoloums; j++) {\n      let count = 0;\n      if (i > 0) if (g[i - 1][j]) count++;\n      if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;\n      if (i > 0 && j < this.noofcoloums - 1) if (g[i - 1][j + 1]) count++;\n      if (j < this.noofcoloums- 1) if (g[i][j + 1]) count++;\n      if (j > 0) if (g[i][j - 1]) count++;\n      if (i < this.noofrows - 1) if (g[i + 1][j]) count++;\n      if (i < this.noofrows - 1 && j > 0) if (g[i + 1][j - 1]) count++;\n      if (i < this.noofrows - 1 && j < this.noofcoloums- 1) if (g[i + 1][j + 1]) count++;\n      if (g[i][j] && (count < 2 || count > 3)) clickcopy[i][j] = false;\n      if (!g[i][j] && count === 3) clickcopy[i][j] = true;\n    }\n  }\n  this.setState({\n   filling:clickcopy,\n    value: this.state.value + 1\n  });\n\n\n}\nplaybtn =()=>{\n\n  clearInterval(this.intervalId);\n\t\tthis.intervalId = setInterval(this.play, 100);\n}\npausebtn=()=>{\n\n  clearInterval(this.intervalId);\n}\nclearbtn=()=>{\n   \n\t\tvar pause= Array(this.noofrows).fill().map(() => Array(this.noofcoloums).fill(false));\n\t\tthis.setState({\n\t\tfilling: pause,\n\t\t\tvalue: 0\n\t\t});\n\t\n\n}\n\n\n\ncomponentDidMount() {\n  this.seedbtn();\n  // this.playbtn();\n}\n\n  render() {\n    // destructuring the states and objects\n    const{filling ,value}=this.state;\n    const{noofcoloums}=this.noofcoloums;\n    const{noofrows}=this.noofrows;\n    console.log(\"value\",value);\n\n    return (\n      <div className=\"main\">\n        \n        <div className=\"buttons\">\n        {/* buttons for making action with appropriate listners */}\n        <button onClick={this.playbtn}>play</button>\n        <button  onClick={this.pausebtn}>pause</button>\n        <button onClick={this.clearbtn}>clear</button>\n        <button  onClick={this.seedbtn}>seed</button>\n        </div>\n      <Grid  \n      // props for creating Grid\n      filling={filling}\n      noofcoloums={noofcoloums}\n      noofrows={noofrows}\n      clickbox={this.clickbox}      />\n     <h4>no of generation:{value}</h4>\n      </div>\n    );\n  }\n}\n\nexport default Main;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}